'use server'
/**
 * –°–µ—Ä–≤–∏—Å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö –≤ –¢–µ–ª–µ–≥—Ä–∞–º
 */

// –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ (3MB)
const MAX_FILE_SIZE = 3 * 1024 * 1024

interface OrderFormData {
	lastName: string
	firstName: string
	city: string
	address: string
	phone: string
	problem: string
	photos?: File[]
}

/**
 * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞ –≤ –¢–µ–ª–µ–≥—Ä–∞–º –∫–∞–Ω–∞–ª —á–µ—Ä–µ–∑ –±–æ—Ç–∞
 */
export async function sendOrderDataToTelegram(
	data: OrderFormData
): Promise<boolean> {
	try {
		// –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –∏ ID —á–∞—Ç–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
		const botToken = process.env.TELEGRAM_BOT_ORDER_TOKEN
		const chatId = process.env.TELEGRAM_CHAT_ID

		console.log('botToken', botToken ? '–û–ø—Ä–µ–¥–µ–ª–µ–Ω' : '–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω')
		console.log('chatId', chatId ? '–û–ø—Ä–µ–¥–µ–ª–µ–Ω' : '–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω')

		if (!botToken || !chatId) {
			console.error('–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è Telegram')
			return false
		}

		// –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
		const message = `
üîî *–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ —É—Å–ª—É–≥—É*

üë§ *–§–ò–û*: ${data.lastName} ${data.firstName}
üèôÔ∏è *–ì–æ—Ä–æ–¥*: ${data.city}
üè† *–ê–¥—Ä–µ—Å*: ${data.address}
üìû *–¢–µ–ª–µ—Ñ–æ–Ω*: ${data.phone}
üí¨ *–ü—Ä–æ–±–ª–µ–º–∞*: ${data.problem}
üì∑ *–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏*: ${
			data.photos && data.photos.length > 0 ? '–ü—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω—ã' : '–ù–µ—Ç'
		}
`

		// –ò—Å–ø–æ–ª—å–∑—É–µ–º Telegram Bot API –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
		try {
			// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
			console.log('–û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram...')
			const textResponse = await fetch(
				`https://api.telegram.org/bot${botToken}/sendMessage`,
				{
					method: 'POST',
					headers: {
						'Content-Type': 'application/json',
					},
					body: JSON.stringify({
						chat_id: chatId,
						text: message,
						parse_mode: 'Markdown',
					}),
					cache: 'no-store',
				}
			)

			if (!textResponse.ok) {
				const errorText = await textResponse.text()
				console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:', errorText)
				return false
			}

			const textResult = await textResponse.json()

			if (!textResult.ok) {
				console.error('Telegram API –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É:', textResult)
				return false
			}

			console.log('–¢–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ')

			// –ï—Å–ª–∏ –µ—Å—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏—Ö –∫–∞–∫ –¥–æ–∫—É–º–µ–Ω—Ç—ã
			if (data.photos && data.photos.length > 0) {
				// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–µ –±–æ–ª–µ–µ 3 —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –¥–ª—è —Å–Ω–∏–∂–µ–Ω–∏—è –Ω–∞–≥—Ä—É–∑–∫–∏
				const limitedPhotos = data.photos.slice(0, 3)

				console.log(
					`–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏: ${limitedPhotos.length}`
				)

				// –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–∞–∂–¥–æ–π —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
				const sendPhotoPromises = limitedPhotos.map(async (photo, index) => {
					try {
						console.log(
							`–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ñ–æ—Ç–æ ${index + 1}/${limitedPhotos.length}:`,
							{
								name: photo.name,
								type: photo.type,
								size: `${(photo.size / 1024).toFixed(2)} KB`,
							}
						)

						// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
						if (photo.size > MAX_FILE_SIZE) {
							console.warn(
								`–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π (${photo.size} –±–∞–π—Ç), –ø—Ä–æ–ø—É—Å–∫–∞–µ–º:`,
								photo.name
							)
							return { success: false, reason: 'file_too_large' }
						}

						// –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º File –≤ ArrayBuffer —Å —Ç–∞–π–º–∞—É—Ç–æ–º
						const arrayBufferPromise = new Promise<ArrayBuffer>(
							(resolve, reject) => {
								const timeout = setTimeout(() => {
									reject(new Error(`–¢–∞–π–º–∞—É—Ç –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ ${photo.name}`))
								}, 10000) // 10 —Å–µ–∫—É–Ω–¥ –Ω–∞ —á—Ç–µ–Ω–∏–µ —Ñ–∞–π–ª–∞

								photo
									.arrayBuffer()
									.then(buffer => {
										clearTimeout(timeout)
										resolve(buffer)
									})
									.catch(err => {
										clearTimeout(timeout)
										reject(err)
									})
							}
						)

						const arrayBuffer = await arrayBufferPromise
						console.log(
							`–§–∞–π–ª ${photo.name} –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω –≤ ArrayBuffer, —Ä–∞–∑–º–µ—Ä: ${arrayBuffer.byteLength} –±–∞–π—Ç`
						)

						// –°–æ–∑–¥–∞–µ–º FormData –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–∞ –∫–∞–∫ –¥–æ–∫—É–º–µ–Ω—Ç–∞
						const formData = new FormData()
						formData.append('chat_id', chatId)
						formData.append('caption', `–§–æ—Ç–æ ${index + 1}: ${photo.name}`)

						// –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –∫–∞–∫ –¥–æ–∫—É–º–µ–Ω—Ç
						formData.append('document', new Blob([arrayBuffer]), photo.name)

						console.log(
							`–û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∞–π–ª–∞ ${photo.name} –∫–∞–∫ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –≤ Telegram...`
						)

						// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ –¥–æ–∫—É–º–µ–Ω—Ç —Å —Ç–∞–π–º–∞—É—Ç–æ–º
						const controller = new AbortController()
						const timeoutId = setTimeout(() => controller.abort(), 20000) // 20 —Å–µ–∫—É–Ω–¥ –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É

						try {
							const docResponse = await fetch(
								`https://api.telegram.org/bot${botToken}/sendDocument`,
								{
									method: 'POST',
									body: formData,
									cache: 'no-store',
									signal: controller.signal,
								}
							)

							clearTimeout(timeoutId)

							const responseText = await docResponse.text()

							if (!docResponse.ok) {
								console.error(
									`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞ ${photo.name}:`,
									responseText
								)
								return {
									success: false,
									reason: 'api_error',
									details: responseText,
								}
							} else {
								console.log(
									`–§–∞–π–ª ${photo.name} —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ Telegram –∫–∞–∫ –¥–æ–∫—É–º–µ–Ω—Ç`
								)
								return { success: true }
							}
						} catch (fetchError: unknown) {
							clearTimeout(timeoutId)
							if (
								fetchError instanceof Error &&
								fetchError.name === 'AbortError'
							) {
								console.error(
									`–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞ ${photo.name}`
								)
								return { success: false, reason: 'timeout' }
							}
							throw fetchError
						}
					} catch (e: unknown) {
						console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞ ${photo.name}:`, e)
						const errorMessage = e instanceof Error ? e.message : String(e)
						return {
							success: false,
							reason: 'processing_error',
							details: errorMessage,
						}
					}
				})

				// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
				console.log('–ù–∞—á–∏–Ω–∞–µ–º –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—É—é –æ—Ç–ø—Ä–∞–≤–∫—É —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π...')
				const results = await Promise.all(sendPhotoPromises)

				// –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
				const successCount = results.filter(r => r.success).length
				console.log(
					`–û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –£—Å–ø–µ—à–Ω–æ: ${successCount}/${limitedPhotos.length}`
				)

				// –ï—Å–ª–∏ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ, —Å—á–∏—Ç–∞–µ–º –∑–∞–¥–∞—á—É –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–π
				if (successCount === 0 && limitedPhotos.length > 0) {
					console.warn('–ù–∏ –æ–¥–Ω–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è –Ω–µ –±—ã–ª–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ')
					// –ù–æ –º—ã –≤—Å–µ —Ä–∞–≤–Ω–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º true, —Ç–∞–∫ –∫–∞–∫ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ
				}
			}

			return true
		} catch (networkError) {
			console.error('–°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ Telegram:', networkError)
			return false
		}
	} catch (error) {
		console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –¥–∞–Ω–Ω—ã—Ö –≤ Telegram:', error)
		return false
	}
}

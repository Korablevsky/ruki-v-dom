'use server'
/**
 * –°–µ—Ä–≤–∏—Å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö –≤ –¢–µ–ª–µ–≥—Ä–∞–º
 */

import { fileTypeFromBuffer } from 'file-type'
import sharp from 'sharp'

interface OrderFormData {
	lastName: string
	firstName: string
	city: string
	address: string
	phone: string
	problem: string
	photos?: File[]
}

/**
 * –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç JPEG
 */
async function convertImageToJpeg(
	arrayBuffer: ArrayBuffer,
	fileName: string
): Promise<{ buffer: Buffer; success: boolean }> {
	try {
		console.log(`–ù–∞—á–∞–ª–æ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ ${fileName} –≤ JPEG...`)

		// –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Ñ–∞–π–ª–∞ –ø–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É
		const buffer = Buffer.from(arrayBuffer)
		const fileType = await fileTypeFromBuffer(buffer)

		console.log(
			`–û–ø—Ä–µ–¥–µ–ª–µ–Ω —Ç–∏–ø —Ñ–∞–π–ª–∞ –¥–ª—è ${fileName}:`,
			fileType?.mime || '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π'
		)

		// –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Å –ø–æ–º–æ—â—å—é sharp
		const jpegBuffer = await sharp(buffer, {
			failOnError: false, // –ù–µ –≤—ã–±—Ä–∞—Å—ã–≤–∞—Ç—å –æ—à–∏–±–∫—É –ø—Ä–∏ –ø—Ä–æ–±–ª–µ–º–∞—Ö —Å —Ñ–æ—Ä–º–∞—Ç–æ–º
		})
			.jpeg({ quality: 85 })
			.toBuffer()

		console.log(
			`–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è ${fileName} –≤ JPEG —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞, —Ä–∞–∑–º–µ—Ä: ${jpegBuffer.length} –±–∞–π—Ç`
		)

		return { buffer: jpegBuffer, success: true }
	} catch (error) {
		console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ ${fileName} –≤ JPEG:`, error)
		// –ï—Å–ª–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π –±—É—Ñ–µ—Ä —Å —Ñ–ª–∞–≥–æ–º –Ω–µ—É–¥–∞—á–∏
		return { buffer: Buffer.from(arrayBuffer), success: false }
	}
}

/**
 * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞ –≤ –¢–µ–ª–µ–≥—Ä–∞–º –∫–∞–Ω–∞–ª —á–µ—Ä–µ–∑ –±–æ—Ç–∞
 */
export async function sendOrderDataToTelegram(
	data: OrderFormData
): Promise<boolean> {
	try {
		// –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –∏ ID —á–∞—Ç–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
		const botToken = process.env.TELEGRAM_BOT_ORDER_TOKEN
		const chatId = process.env.TELEGRAM_CHAT_ID

		console.log('botToken', botToken ? '–û–ø—Ä–µ–¥–µ–ª–µ–Ω' : '–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω')
		console.log('chatId', chatId ? '–û–ø—Ä–µ–¥–µ–ª–µ–Ω' : '–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω')

		if (!botToken || !chatId) {
			console.error('–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è Telegram')
			return false
		}

		// –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
		const message = `
üîî *–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ —É—Å–ª—É–≥—É*

üë§ *–§–ò–û*: ${data.lastName} ${data.firstName}
üèôÔ∏è *–ì–æ—Ä–æ–¥*: ${data.city}
üè† *–ê–¥—Ä–µ—Å*: ${data.address}
üìû *–¢–µ–ª–µ—Ñ–æ–Ω*: ${data.phone}
üí¨ *–ü—Ä–æ–±–ª–µ–º–∞*: ${data.problem}
üì∑ *–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏*: ${
			data.photos && data.photos.length > 0 ? '–ü—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω—ã' : '–ù–µ—Ç'
		}
`

		// –ò—Å–ø–æ–ª—å–∑—É–µ–º Telegram Bot API –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
		try {
			const textResponse = await fetch(
				`https://api.telegram.org/bot${botToken}/sendMessage`,
				{
					method: 'POST',
					headers: {
						'Content-Type': 'application/json',
					},
					body: JSON.stringify({
						chat_id: chatId,
						text: message,
						parse_mode: 'Markdown',
					}),
					cache: 'no-store',
				}
			)

			if (!textResponse.ok) {
				const errorText = await textResponse.text()
				console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:', errorText)
				return false
			}

			const textResult = await textResponse.json()

			if (!textResult.ok) {
				console.error('Telegram API –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É:', textResult)
				return false
			}

			// –ï—Å–ª–∏ –µ—Å—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏—Ö
			if (data.photos && data.photos.length > 0) {
				// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–µ –±–æ–ª–µ–µ 5 —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –¥–ª—è —Å–Ω–∏–∂–µ–Ω–∏—è –Ω–∞–≥—Ä—É–∑–∫–∏ –Ω–∞ –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞—Ö
				const limitedPhotos = data.photos.slice(0, 5)

				for (const photo of limitedPhotos) {
					try {
						// –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º File –≤ ArrayBuffer
						const arrayBuffer = await photo.arrayBuffer()

						// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –∏ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ —É–º–µ–Ω—å—à–∞–µ–º –µ–≥–æ
						if (arrayBuffer.byteLength > 10000000) {
							// –ü—Ä–µ–¥–µ–ª ~10MB
							console.warn('–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º:', photo.name)
							continue
						}

						// –°–æ–∑–¥–∞–µ–º FormData –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–∞
						const formData = new FormData()
						formData.append('chat_id', chatId)
						formData.append('caption', `–§–æ—Ç–æ: ${photo.name}`)

						// –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Ñ–∞–π–ª–∞ –ø–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É –∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—é
						const buffer = Buffer.from(arrayBuffer)
						const fileType = await fileTypeFromBuffer(buffer)
						const fileExtension =
							photo.name.split('.').pop()?.toLowerCase() || ''

						console.log(
							`–§–∞–π–ª ${photo.name}, —Ç–∏–ø: ${photo.type}, –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π —Ç–∏–ø: ${
								fileType?.mime || '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π'
							}, —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ: ${fileExtension}`
						)

						// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞
						const isHeifFormat =
							photo.type === 'image/heif' ||
							photo.type === 'image/heic' ||
							fileType?.mime === 'image/heif' ||
							fileType?.mime === 'image/heic' ||
							fileExtension === 'heic' ||
							fileExtension === 'heif'

						if (isHeifFormat) {
							// –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º HEIF/HEIC –≤ JPEG
							console.log(
								'–û–±–Ω–∞—Ä—É–∂–µ–Ω —Ñ–æ—Ä–º–∞—Ç HEIF/HEIC, –Ω–∞—á–∏–Ω–∞–µ–º –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—é:',
								photo.name
							)

							try {
								const { buffer: jpegBuffer, success } =
									await convertImageToJpeg(arrayBuffer, photo.name)

								if (success) {
									const fileName = `${photo.name.split('.')[0]}.jpg`
									console.log(`–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ñ–∞–π–ª ${fileName}`)
									formData.append(
										'photo',
										new Blob([jpegBuffer], { type: 'image/jpeg' }),
										fileName
									)
								} else {
									// –ï—Å–ª–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å, –ø–æ–ø—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–∞–∫ –µ—Å—Ç—å
									console.log(
										`–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å, –ø—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ä–∏–≥–∏–Ω–∞–ª: ${photo.name}`
									)
									formData.append(
										'photo',
										new Blob([arrayBuffer], {
											type: photo.type || 'application/octet-stream',
										}),
										photo.name
									)
								}
							} catch (convError) {
								console.error('–û—à–∏–±–∫–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏:', convError)
								// –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏, –ø—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–∞–∫ –µ—Å—Ç—å
								formData.append(
									'photo',
									new Blob([arrayBuffer], {
										type: photo.type || 'application/octet-stream',
									}),
									photo.name
								)
							}
						} else {
							// –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
							console.log(`–û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –≤ –∏—Å—Ö–æ–¥–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ: ${photo.name}`)
							formData.append(
								'photo',
								new Blob([arrayBuffer], {
									type:
										photo.type || fileType?.mime || 'application/octet-stream',
								}),
								photo.name
							)
						}

						// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ
						console.log(`–û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∞–π–ª–∞ ${photo.name} –≤ Telegram...`)

						try {
							const photoResponse = await fetch(
								`https://api.telegram.org/bot${botToken}/sendPhoto`,
								{
									method: 'POST',
									body: formData,
									cache: 'no-store',
								}
							)

							const responseText = await photoResponse.text()

							if (!photoResponse.ok) {
								console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ç–æ:', responseText)
							} else {
								console.log(`–§–∞–π–ª ${photo.name} —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ Telegram`)
								console.log('–û—Ç–≤–µ—Ç API:', responseText)
							}
						} catch (e) {
							console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ç–æ –≤ Telegram:', e)
							// –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å –¥—Ä—É–≥–∏–º–∏ —Ñ–æ—Ç–æ, –¥–∞–∂–µ –µ—Å–ª–∏ –æ–¥–Ω–æ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å
						}
					} catch (e) {
						console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–æ—Ç–æ:', e)
						// –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å –¥—Ä—É–≥–∏–º–∏ —Ñ–æ—Ç–æ, –¥–∞–∂–µ –µ—Å–ª–∏ –æ–¥–Ω–æ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å
					}
				}
			}

			return true
		} catch (networkError) {
			console.error('–°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ Telegram:', networkError)
			return false
		}
	} catch (error) {
		console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –¥–∞–Ω–Ω—ã—Ö –≤ Telegram:', error)
		return false
	}
}

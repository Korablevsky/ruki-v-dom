'use server'
/**
 * –°–µ—Ä–≤–∏—Å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö –≤ –¢–µ–ª–µ–≥—Ä–∞–º
 */

interface OrderFormData {
	lastName: string
	firstName: string
	city: string
	address: string
	phone: string
	problem: string
	photos?: File[]
}

/**
 * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞ –≤ –¢–µ–ª–µ–≥—Ä–∞–º –∫–∞–Ω–∞–ª —á–µ—Ä–µ–∑ –±–æ—Ç–∞
 */
export async function sendOrderDataToTelegram(
	data: OrderFormData
): Promise<boolean> {
	try {
		// –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –∏ ID —á–∞—Ç–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
		const botToken = process.env.TELEGRAM_BOT_ORDER_TOKEN
		const chatId = process.env.TELEGRAM_CHAT_ID

		console.log('botToken', botToken)
		console.log('chatId', chatId)

		if (!botToken || !chatId) {
			console.error('–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è Telegram')
			return false
		}

		// –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
		const message = `
üîî *–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ —É—Å–ª—É–≥—É*

üë§ *–§–ò–û*: ${data.lastName} ${data.firstName}
üèôÔ∏è *–ì–æ—Ä–æ–¥*: ${data.city}
üè† *–ê–¥—Ä–µ—Å*: ${data.address}
üìû *–¢–µ–ª–µ—Ñ–æ–Ω*: ${data.phone}
üí¨ *–ü—Ä–æ–±–ª–µ–º–∞*: ${data.problem}
üì∑ *–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏*: ${
			data.photos && data.photos.length > 0 ? '–ü—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω—ã' : '–ù–µ—Ç'
		}
`

		// –ò—Å–ø–æ–ª—å–∑—É–µ–º Telegram Bot API –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
		const textResponse = await fetch(
			`https://api.telegram.org/bot${botToken}/sendMessage`,
			{
				method: 'POST',
				headers: {
					'Content-Type': 'application/json',
				},
				body: JSON.stringify({
					chat_id: chatId,
					text: message,
					parse_mode: 'Markdown',
				}),
			}
		)

		const textResult = await textResponse.json()

		// –ï—Å–ª–∏ –µ—Å—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏—Ö
		if (data.photos && data.photos.length > 0) {
			const photoPromises = data.photos.map(async photo => {
				try {
					// –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º File –≤ ArrayBuffer
					const arrayBuffer = await photo.arrayBuffer()

					// –°–æ–∑–¥–∞–µ–º FormData –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–∞
					const formData = new FormData()
					formData.append('chat_id', chatId)
					formData.append('caption', `–§–æ—Ç–æ: ${photo.name}`)

					// –°–æ–∑–¥–∞–µ–º Blob –∏–∑ ArrayBuffer —Å —Ç–∏–ø–æ–º —Ñ–∞–π–ª–∞
					const blob = new Blob([arrayBuffer], { type: photo.type })
					formData.append('photo', blob, photo.name)

					// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ
					const photoResponse = await fetch(
						`https://api.telegram.org/bot${botToken}/sendPhoto`,
						{
							method: 'POST',
							body: formData,
						}
					)

					return photoResponse.json()
				} catch (e) {
					console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ç–æ:', e)
					return { ok: false }
				}
			})

			// –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤—Å–µ—Ö —Ñ–æ—Ç–æ
			await Promise.all(photoPromises)
		}

		return textResult.ok === true
	} catch (error) {
		console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –¥–∞–Ω–Ω—ã—Ö –≤ Telegram:', error)
		return false
	}
}

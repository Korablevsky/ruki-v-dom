'use server'
/**
 * –°–µ—Ä–≤–∏—Å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö –≤ –¢–µ–ª–µ–≥—Ä–∞–º
 */

import { fileTypeFromBuffer } from 'file-type'
import sharp from 'sharp'

// –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ (5MB)
const MAX_FILE_SIZE = 5 * 1024 * 1024

interface OrderFormData {
	lastName: string
	firstName: string
	city: string
	address: string
	phone: string
	problem: string
	photos?: File[]
}

/**
 * –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç JPEG –∏ –æ–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ—Ç –µ–≥–æ —Ä–∞–∑–º–µ—Ä
 */
async function processImage(
	arrayBuffer: ArrayBuffer,
	fileName: string
): Promise<{ buffer: Buffer; success: boolean; mimeType: string }> {
	try {
		console.log(
			`–ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ ${fileName}, —Ä–∞–∑–º–µ—Ä: ${arrayBuffer.byteLength} –±–∞–π—Ç`
		)

		// –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Ñ–∞–π–ª–∞ –ø–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É
		const buffer = Buffer.from(arrayBuffer)
		const fileType = await fileTypeFromBuffer(buffer)

		console.log(
			`–û–ø—Ä–µ–¥–µ–ª–µ–Ω —Ç–∏–ø —Ñ–∞–π–ª–∞ –¥–ª—è ${fileName}:`,
			fileType?.mime || '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π'
		)

		// –ò—Å–ø–æ–ª—å–∑—É–µ–º sharp –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
		const image = sharp(buffer, {
			failOnError: false, // –ù–µ –≤—ã–±—Ä–∞—Å—ã–≤–∞—Ç—å –æ—à–∏–±–∫—É –ø—Ä–∏ –ø—Ä–æ–±–ª–µ–º–∞—Ö —Å —Ñ–æ—Ä–º–∞—Ç–æ–º
		})

		// –ü–æ–ª—É—á–∞–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
		const metadata = await image.metadata()
		console.log(
			`–ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è ${fileName}:`,
			metadata.width,
			'x',
			metadata.height,
			'—Ñ–æ—Ä–º–∞—Ç:',
			metadata.format
		)

		// –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ —É–º–µ–Ω—å—à–∏—Ç—å —Ä–∞–∑–º–µ—Ä
		const needsResize = metadata.width && metadata.width > 1200

		// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
		let processedImage = image

		if (needsResize) {
			processedImage = processedImage.resize({
				width: 1200,
				withoutEnlargement: true,
			})
		}

		// –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ JPEG —Å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–µ–π –∫–∞—á–µ—Å—Ç–≤–∞
		const jpegBuffer = await processedImage
			.jpeg({ quality: 80, mozjpeg: true })
			.toBuffer()

		console.log(
			`–û–±—Ä–∞–±–æ—Ç–∫–∞ ${fileName} —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞, –Ω–æ–≤—ã–π —Ä–∞–∑–º–µ—Ä: ${jpegBuffer.length} –±–∞–π—Ç`
		)

		return { buffer: jpegBuffer, success: true, mimeType: 'image/jpeg' }
	} catch (error) {
		console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ ${fileName}:`, error)
		// –ï—Å–ª–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π –±—É—Ñ–µ—Ä —Å —Ñ–ª–∞–≥–æ–º –Ω–µ—É–¥–∞—á–∏
		return {
			buffer: Buffer.from(arrayBuffer),
			success: false,
			mimeType: 'application/octet-stream',
		}
	}
}

/**
 * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞ –≤ –¢–µ–ª–µ–≥—Ä–∞–º –∫–∞–Ω–∞–ª —á–µ—Ä–µ–∑ –±–æ—Ç–∞
 */
export async function sendOrderDataToTelegram(
	data: OrderFormData
): Promise<boolean> {
	try {
		// –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –∏ ID —á–∞—Ç–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
		const botToken = process.env.TELEGRAM_BOT_ORDER_TOKEN
		const chatId = process.env.TELEGRAM_CHAT_ID

		console.log('botToken', botToken ? '–û–ø—Ä–µ–¥–µ–ª–µ–Ω' : '–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω')
		console.log('chatId', chatId ? '–û–ø—Ä–µ–¥–µ–ª–µ–Ω' : '–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω')

		if (!botToken || !chatId) {
			console.error('–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è Telegram')
			return false
		}

		// –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
		const message = `
üîî *–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ —É—Å–ª—É–≥—É*

üë§ *–§–ò–û*: ${data.lastName} ${data.firstName}
üèôÔ∏è *–ì–æ—Ä–æ–¥*: ${data.city}
üè† *–ê–¥—Ä–µ—Å*: ${data.address}
üìû *–¢–µ–ª–µ—Ñ–æ–Ω*: ${data.phone}
üí¨ *–ü—Ä–æ–±–ª–µ–º–∞*: ${data.problem}
üì∑ *–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏*: ${
			data.photos && data.photos.length > 0 ? '–ü—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω—ã' : '–ù–µ—Ç'
		}
`

		// –ò—Å–ø–æ–ª—å–∑—É–µ–º Telegram Bot API –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
		try {
			const textResponse = await fetch(
				`https://api.telegram.org/bot${botToken}/sendMessage`,
				{
					method: 'POST',
					headers: {
						'Content-Type': 'application/json',
					},
					body: JSON.stringify({
						chat_id: chatId,
						text: message,
						parse_mode: 'Markdown',
					}),
					cache: 'no-store',
				}
			)

			if (!textResponse.ok) {
				const errorText = await textResponse.text()
				console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:', errorText)
				return false
			}

			const textResult = await textResponse.json()

			if (!textResult.ok) {
				console.error('Telegram API –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É:', textResult)
				return false
			}

			// –ï—Å–ª–∏ –µ—Å—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏—Ö
			if (data.photos && data.photos.length > 0) {
				// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–µ –±–æ–ª–µ–µ 5 —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –¥–ª—è —Å–Ω–∏–∂–µ–Ω–∏—è –Ω–∞–≥—Ä—É–∑–∫–∏
				const limitedPhotos = data.photos.slice(0, 5)

				for (const photo of limitedPhotos) {
					try {
						// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
						if (photo.size > MAX_FILE_SIZE) {
							console.warn(
								`–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π (${photo.size} –±–∞–π—Ç), –ø—Ä–æ–ø—É—Å–∫–∞–µ–º:`,
								photo.name
							)
							continue
						}

						// –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º File –≤ ArrayBuffer
						const arrayBuffer = await photo.arrayBuffer()

						// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ (–∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è + –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è)
						const {
							buffer: processedBuffer,
							success,
							mimeType,
						} = await processImage(arrayBuffer, photo.name)

						// –°–æ–∑–¥–∞–µ–º FormData –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–∞
						const formData = new FormData()
						formData.append('chat_id', chatId)
						formData.append('caption', `–§–æ—Ç–æ: ${photo.name}`)

						// –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–º—è —Ñ–∞–π–ª–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
						const fileName =
							success && mimeType === 'image/jpeg'
								? `${photo.name.split('.')[0]}.jpg`
								: photo.name

						console.log(`–û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∞–π–ª–∞ ${fileName} –≤ Telegram...`)

						// –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –≤ —Ñ–æ—Ä–º—É
						formData.append(
							'photo',
							new Blob([processedBuffer], { type: mimeType }),
							fileName
						)

						// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ
						const photoResponse = await fetch(
							`https://api.telegram.org/bot${botToken}/sendPhoto`,
							{
								method: 'POST',
								body: formData,
								cache: 'no-store',
							}
						)

						const responseText = await photoResponse.text()

						if (!photoResponse.ok) {
							console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ç–æ:', responseText)

							// –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–∞–∫ —Ñ–æ—Ç–æ, –ø—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–∞–∫ –¥–æ–∫—É–º–µ–Ω—Ç
							if (photoResponse.status === 400) {
								console.log('–ü—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–∞–∫ –¥–æ–∫—É–º–µ–Ω—Ç...')

								const docFormData = new FormData()
								docFormData.append('chat_id', chatId)
								docFormData.append('caption', `–§–∞–π–ª: ${photo.name}`)
								docFormData.append(
									'document',
									new Blob([processedBuffer], { type: mimeType }),
									fileName
								)

								const docResponse = await fetch(
									`https://api.telegram.org/bot${botToken}/sendDocument`,
									{
										method: 'POST',
										body: docFormData,
										cache: 'no-store',
									}
								)

								if (!docResponse.ok) {
									console.error(
										'–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞:',
										await docResponse.text()
									)
								} else {
									console.log('–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∫–∞–∫ –¥–æ–∫—É–º–µ–Ω—Ç')
								}
							}
						} else {
							console.log(`–§–∞–π–ª ${fileName} —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ Telegram`)
						}
					} catch (e) {
						console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–æ—Ç–æ:', e)
						// –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å –¥—Ä—É–≥–∏–º–∏ —Ñ–æ—Ç–æ, –¥–∞–∂–µ –µ—Å–ª–∏ –æ–¥–Ω–æ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å
					}
				}
			}

			return true
		} catch (networkError) {
			console.error('–°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ Telegram:', networkError)
			return false
		}
	} catch (error) {
		console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –¥–∞–Ω–Ω—ã—Ö –≤ Telegram:', error)
		return false
	}
}
